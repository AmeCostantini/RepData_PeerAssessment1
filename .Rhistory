install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
install_from_swirl("Data_Analysis")
install_from_swirl("Mathematical_Biostatistics_Boot_Camp")
install_from_swirl("Open_Intro/Overview_of_Statistics")
install_from_swirl("Regression_Models")
library("swirl")
swirl()
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
---
title: "diamonds price"
output: html_document
===================================
Lanciamo innanzitutto le utils necessarie
```{r}
setwd("/Users/Americo/Documents/Education/udacity/Data_analysis_with_R/EDA_Course_Materials/down_up_loads")
library(ggplot2)
library("gridExtra")
library("dplyr")
data(diamonds)
```
Analizziamo la relazione tra price e carat dei diamanti. Stampiamo uno scatterplot con limite degli assi al 99 percentile
```{r}
ggplot(data=diamonds, aes(x=carat, y=price))+
geom_point(color="blue", alpha=.2)+
scale_x_continuous(lim=c(0, quantile(diamonds$carat, .99)))+
scale_y_continuous(lim=c(0, quantile(diamonds$price, .99)))+
geom_smooth(method="lm", color="red")
```
Notiamo una variabilità crescente al crescere dei carati, e un andamento non lineare che probabimente rivela una inadeguatezza
della retta di regressione. ulteriore check:
```{r}
cor.test(diamonds$carat, diamonds$price)
```
in realtà il coefficiente di correlazione lineare è molto alto con p-value molto molto basso.
Ora utilizziamo *ggpairs* per esplorare il dataset (un suo campione, per questioni computazionali)
```{r ggpairs Function}
# install these if necessary
#install.packages('GGally')
#install.packages('scales')
#install.packages('memisc')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
```
10000 righe le processa bene. le colonne non dovrebbero superare le 10 unità
le variabli monetarie tendono ad avere ordini di grandezza molto elevati, ad esempio per l'inflazione crescente o per un fenomeno di PATH DEPENDANCE (I ricchi che diventano sempre più ricchi).
Per comprimere la variabile monetaria e renderla utile all'analisi, spesso è opportuno trasformarla nella sua logaritmica!
Esempio: **confronto tra l'istogramma dei prezzi e l'istogramma del logaritmo in base 10 dei prezzi**
```{r}
g6_1<-ggplot(data=diamonds, aes(x=price))+
geom_histogram(binwidth=100)+
ggtitle("price")
g6_2<-ggplot(data=diamonds, aes(x=price))+
scale_x_log10()+#questo tipo di trasformazione ti permette di mantenere i valori originari sull'asse
geom_histogram(color="red",binwidth=.01)+
ggtitle("logaritmo in base 10 di price")
grid.arrange(g6_1,g6_2)
```
Che differenza! Una iperbolica è diventata una bimodale! peraltro sembra proprio che divida gli acquirenti poveri dai ricchi,
cosa che nell'istogramma dei prezzi si vede poco data l'enorme variabilità.
la variabile  più legata al prezzo sembrano i carati.vediamo lo scatterplot con il logaritmo del prezzo.
inoltre voglio fare un confronto tra le due trasformazioni logaritmiche
```{r}
g6_3<-ggplot(data=diamonds, aes(x=carat, y=log10(price)))+
geom_point()
g6_4<-ggplot(data=diamonds, aes(x=carat, y=price))+
geom_point()+
scale_y_log10()
grid.arrange(g6_3,g6_4)
```
nel secondo grafico i valori rimangono quelli originari, mentre la nuvola dei punti è la medesima.
sembra esserci una grossa dispersione dei carati; trovare una trasformata anche per la variabile x non sarebbe male.
sappiamo che i carati sono una funzione del prodotto di 3 variabili. la radice cubica potrebbe essere la trasformata giusta.
ma come trasformarla e mantenere i valori originari sul grafico?
Creiamo una funzione che poi applichiamo in scale_x_continuous, con il parametro trans=
```{r cuberoot transformation}
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
```
```{r}
ggplot(data=diamonds, aes(x=carat, y=price))+
geom_point(alpha=.4, color="blue")+
scale_x_continuous(trans=cuberoot_trans())+
scale_y_continuous(trans=log10_trans())
```
e questa relazione ora sembra davvero lineare! Possiamo costruire un modello predittivo basato sulla regressione lineare!!!!
tuttavia prima è opportuno risolvere il problema di overplotting, cioè di troppi datapoint sovrapposti che non fanno capire
a densità del grafico.
usiamo alfa size e jitter
```{r}
ggplot(data=diamonds, aes(x=carat, y=price))+
geom_point(alpha=.5, color="blue", size=.75, position="jitter")+
scale_x_continuous(trans=cuberoot_trans())+
scale_y_continuous(trans=log10_trans())
```
Introduciamo in terzo fattore: clarity
```{r}
ggplot(data=diamonds, aes(x=carat, y=price, color=clarity))+
geom_point(alpha=.5, size=.75, position="jitter")+
scale_x_continuous(trans=cuberoot_trans())+
scale_y_continuous(trans=log10_trans())+
ggtitle("price vs carat and clarity")
```
clarity spiega in parte la variabilità del prezzo
Cambiamo il terzo fattore: cut
```{r}
ggplot(data=diamonds, aes(x=carat, y=price, color=cut))+
geom_point(alpha=.5, size=.75, position="jitter")+
scale_x_continuous(trans=cuberoot_trans())+
scale_y_continuous(trans=log10_trans())+
ggtitle("price vs carat and cut")
```
cut non sembra spiegare la variabilità del prezzo, per stesso tagli abbiamo prezzi molto diversi
Cambiamo il terzo fattore: color
```{r}
ggplot(data=diamonds, aes(x=carat, y=price, color=color))+
geom_point(alpha=.5, size=.75, position="jitter")+
scale_x_continuous(trans=cuberoot_trans())+
scale_y_continuous(trans=log10_trans())+
ggtitle("price vs carat and color")
```
m1<-lm(data=diamonds, I(log10(price)~I(carat^(1/3))))
library(xtable)
View(xtable(summary(m1)))
summary(m1)
m3 <- update(m1, ~ . + cut)
mtable(m1, m3)
confint(m1)
predict(m1, data.frame(carat=2), interval="confidence")
View(diamonds)
verify<-subset(diamonds, carat==2)
View(verify)
transform(verify, price2=log10(price))
View(verify)
transform(verify, price2=log10(price))
transform(verify, verify$price2=log10(price))
verify$price2=log10(price)
verify$price2=log10(verify$price)
View(verify)
predict(m1, data.frame(cuberoot(carat=2)), interval="confidence")
verify<-subset(diamonds, carat==2)
verify$price2=log10(verify$price)
predict(m1, data.frame((carat^(1/3))=2)), interval="confidence")
verify<-subset(diamonds, carat==2)
verify$price2=log10(verify$price)
View(verify)
predict(m1, data.frame((carat^(1/3))=2)), interval="confidence")
predict(m1, data.frame(carat^(1/3)=2)), interval="confidence")
predict(m1, data.frame(carat^(1/3)=2), interval="confidence")
predict(m1, data.frame(carat^(1/3)==2), interval="confidence")
predict(m1, data.frame(carat=2), interval="confidence")
predict(m1, data.frame(carat^1/3=2), interval="confidence")
predict(m1, data.frame(carat^(1/3)=2), interval="confidence")
predict(m1, data.frame(carat=8), interval="confidence")
verify<-subset(diamonds, carat==8)
verify$price2=log10(verify$price)
2^1/3
predict(m1, data.frame(carat=2), interval="confidence")
verify<-subset(diamonds, carat==2)
verify$price2=log10(verify$price)
View(verify)
summary(verify$price2)
quantile(verify$price2, seq(0,1,0.1))
View(xtable(quantile(verify$price2, seq(0,1,0.1))))
by(verify$price2, clarity, summary)
by(verify$price2, verify$clarity, summary)
setwd("/Users/Americo/Documents/Education/Data_science/Coursera/reproducible_research/project/RepData_PeerAssessment1")
list.files()
act1<-read.csv("activity.csv")
names(act1)
library(xtable)
View(xtable(table(act1$steps)))
names(act1)
act1<-read.csv("activity.csv")
list.files()
setwd("/Users/Americo/Documents/Education/Data_science/Coursera/reproducible_research/project/RepData_PeerAssessment1")
list.files()
act1<-read.csv("activity.csv")
names(act1)
library(xtable)
View(xtable(table(act1$steps)))
table(act1$date)
table(act1$interval)
table(is.na(act1$steps))
View(act1)
library(dplyr)
act1_agg1<-group_by(act1, date)
act1_agg2<-summarise(act1_agg1,
steps_per_each_day_mean=mean(steps),
steps_per_each_day_median=median(steps),
steps_per_each_day_sum=sum(steps))
View(act1_agg2)
act1_agg1<-group_by(subset(act1,!is.na(steps)), date)
act1_agg2<-summarise(act1_agg1,
steps_per_each_day_mean=mean(steps),
steps_per_each_day_median=median(steps),
steps_per_each_day_sum=sum(steps))
View(act1_agg2)
View(act1)
?median
act1_agg3<-summarise(act1_agg1,
steps_per_each_day_median=median(steps))
View(act1_agg3)
median(act1$steps)
median(!is.na(act1$steps))
View(act1)
!is.na(act1$steps)
act_pp<-subset(act1,!is.na(steps))
View(act_pp)
median(act_pp$steps)
quantile(act_pp$steps, seq(0,1,0.1))
View(act1_agg2)
24/60/12
24*60
24*60/5
24*60
act1_agg2<-summarise(act1_agg1,
steps_per_each_day_mean=mean(steps),
steps_per_each_day_median=median(steps),
steps_per_each_day_sum=sum(steps),
measurements_per_each_day=n())
View(act1_agg2)
table(act1_agg2$measurements_per_each_day)
View(act1)
sum(act1_agg2$steps_per_each_day_sum)
sum(act1_agg2$steps_per_each_day_sum)/288
sum(act1_agg2$steps_per_each_day_sum)/sum(act1_agg2$measurements_per_each_day)
View(act1)
act1_agg2<-summarise(act1_agg1,
steps_per_each_day_mean=mean(steps),
steps_per_each_day_median=median(steps),
steps_per_each_day=sum(steps),
measurements_per_each_day=n())
View(act1_agg2)
sum(act1_agg2$steps_per_each_day_sum)/sum(act1_agg2$measurements_per_each_day)
sum(act1_agg2$steps_per_each_day)/sum(act1_agg2$measurements_per_each_day)
mean(act1_agg2$steps_per_each_day)
sum(act1_agg2$steps_per_each_day/288)
ggplot(data=act1_agg, aes(x=steps_per_each_day))+
geom_histogram(color="blue")
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue")
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)
ggplot(data=act1_agg2, aes(x=date, y=steps_per_each_day))+
geom_bar(color="blue")
?geom_bar
ggplot(data=act1_agg2, aes(x=date, y=steps_per_each_day))+
geom_bar(color="blue")+
stat_identity()
ggplot(data=act1_agg2, aes(x=date, y=steps_per_each_day))+
geom_bar(color="blue", stat="identity")
ggplot(data=act1_agg2, aes(x=date, y=steps_per_each_day))+
geom_bar(color="blue",stat="identity")
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(x=mean)
?geom_hline
?geom_vline
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(stat="mean"")
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(stat="mean")
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(xintercept=mean)
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(xintercept=mean(steps_per_each_day))
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(xintercept=mean(act1_agg2$steps_per_each_day))
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(xintercept=mean(act1_agg2$steps_per_each_day), color="green")
?geom_vline
median(act1_agg2$steps_per_each_day)
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(xintercept=mean(act1_agg2$steps_per_each_day), color="green")
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(xintercept=mean(act1_agg2$steps_per_each_day), color="green")+
geom_vline(xintercept=median(act1_agg2$steps_per_each_day), color="red")
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(xintercept=c(mean(act1_agg2$steps_per_each_day),median(act1_agg2$steps_per_each_day)) color=c("green", "red"))
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(xintercept=c(mean(act1_agg2$steps_per_each_day), color="green")
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(xintercept=mean(act1_agg2$steps_per_each_day), color="green")
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(xintercept=mean(act1_agg2$steps_per_each_day), color="green")
ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="blue", binwidth=500)+
geom_vline(xintercept=median(act1_agg2$steps_per_each_day), color="green")
