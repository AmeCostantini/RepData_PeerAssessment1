install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
install_from_swirl("Data_Analysis")
install_from_swirl("Mathematical_Biostatistics_Boot_Camp")
install_from_swirl("Open_Intro/Overview_of_Statistics")
install_from_swirl("Regression_Models")
library("swirl")
swirl()
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
<!-- rmarkdown v1 -->
---
# Title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
Setting directories and libraries.
Dataset was downloaded from [this URL](https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip) on 2015 January 16th
```{r loading data}
setwd("/Users/Americo/Documents/Education/Data_science/Coursera/reproducible_research/project/RepData_PeerAssessment1")
act1<-read.csv("activity.csv")
```
```{r setting libraries}
library(xtable)
library(grid)
library(gridExtra)
library(ggplot2)
library(plyr)
library(dplyr)
```
## What is mean total number of steps taken per day?`
### 1. Make a histogram of the total number of steps taken each day
To answer this question I aggregated the data using the dplyr package, and calculated the sum of the steps for each single day; then I calculated the mean and median of the number of steps per day and created the histogram with a vertical line for the mean.
I ignore Na's values
```{r mean total steps per day, fig.width=12, fig.height=9}
#grouping the dataframe to sum the steps on a daily basis
act1_agg1<-group_by(subset(act1,!is.na(steps)), date)
act1_agg2<-summarise(act1_agg1,
steps_per_each_day=sum(steps))
head(act1_agg2)
#calculating mean and median
steps_mean<-mean(act1_agg2$steps_per_each_day)
steps_mean<-round(steps_mean, digits=2)
steps_median<-median(act1_agg2$steps_per_each_day)
#plotting the histogram with a vertical line for the mean
g1<-ggplot(data=act1_agg2, aes(x=steps_per_each_day))+
geom_histogram(color="black", fill="blue", binwidth=500)+
geom_vline(xintercept=mean(act1_agg2$steps_per_each_day), color="green")+
scale_x_continuous(breaks=seq(0, max(act1_agg2$steps_per_each_day), 1000))+
scale_y_discrete(breaks=seq(0,10,1))+
ggtitle("steps taken each day")
print(g1)
```
### 2. Calculate and report the **mean** and **median** total number of steps taken per day
So, the mean total number of steps taken per day is `r steps_mean` and the median is `r steps_median`
## What is the average daily activity pattern?
To answer this question I aggregated the data using the dplyr package and calculated the mean of the steps taken for each interval accross days.
### 1. Make a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
I decided to decode the interval, so that the next graph would not be affected by **the interval between 55 and 100** and so on.
I did it creating a vector of the same length of the numbers of intervals in a day (288), and I called *interval2*. Then I divided each value for 60; so now for example the interval (called *interval3*) 8.5 now mean the eigth hour and a half
```{r average daily activity pattern, fig.width=16, fig.height=9}
#grouping the dataframe by interval
act1_agg_int<-group_by(subset(act1,!is.na(steps)), interval)
act1_agg_int2<-summarise(act1_agg_int,
mean_steps_per_int=mean(steps))
#calculating the mean
act1_agg_int2$mean_steps_per_int<-round(act1_agg_int2$mean_steps_per_int, digits=2)
#creating a different interval (see the printed subset of the output)
act1_agg_int2$interval2<-seq(0,5*287, 5)
head(act1_agg_int2$interval2, 50)
#now i divide this values by 60
act1_agg_int2$interval3<-act1_agg_int2$interval2/60
head(act1_agg_int2, 25)
#plotting
g2<-ggplot(data=act1_agg_int2, aes(x=interval3, y=mean_steps_per_int))+
geom_line()+
scale_x_continuous(breaks=seq(0, 24.0, .5))+
ggtitle("mean of steps taken in each interval")
print(g2)
```
### Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r max 5 minute interval}
max_steps_int<-act1_agg_int2[which.max(act1_agg_int2$mean_steps_per_int),]
print(max_steps_int)
```
## Imputing missing values
### Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc
I decided to fill in missing values with the average steps taken for each interval of the day, in order to respect a kind of daily pattern
```{r imputing missing values}
#merging the activity dataset with the steps mean per interval dataset, so that I am able to fill the NAs with the corresponding
#values of interval3
act1_notNA<-merge(x = act1, y = act1_agg_int2, by = "interval", all.x=TRUE)
act1_notNA<-act1_notNA[order(act1_notNA$date,act1_notNA$interval),]
head(act1_notNA)
act1_notNA$steps_notNA<-ifelse(is.na(act1_notNA$steps), act1_agg_int2$mean_steps_per_int, act1_notNA$steps)
head(act1_notNA)
```
### Create a new dataset that is equal to the original dataset but with the missing data filled in
```{r cleaning NA filled in dataset}
#subsetting and renaming to create a dataset like the origianl one
row.names=FALSE
act2<-subset(act1_notNA, select=c(steps_notNA, date, interval))
act2<-data.frame(act2, row.names=NULL)
library("reshape")
act2<-rename(act2,c(steps_notNA="steps"))
head(act2)
```
## Are there differences in activity patterns between weekdays and weekends?
### 1. Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
```{r weekend factor}
#converting date as a datetime variable in order to use the function weekdays. I use lubridate package and I set local options to english in order to have appropriate names of the days (I am italian). I use the act2 dataframe because is the one with missing values filled in
Sys.setlocale("LC_TIME","en_US")
library("lubridate")
act2$date2 <- ymd(act2$date)
class(act2$date2)
#with an ifelse condition I create the factor variable day_type to distinguish the weekdays from the weekend ones
act2$day_type<-ifelse(weekdays(act2$date2)=="Sunday"|weekdays(act2$date2)=="Saturday", "weekend day", "weekday")
act2$day_type<-factor(act2$day_type)
head(act2)
```
### 2. Make a panel plot containing a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
I will do as before, so:
1. creating a different interval;
2. calculating the mean of steps for each interval, this time grouping by interval and by day type;
3. plotting the graph faceting by day type
```{r weekend activity pattern, fig.width=17, fig.height=9}
#step1: creating a different interval
act2$interval2<-seq(0,287*5,5)/60
act2$interval3<-round(act2$interval2, digits=2)
head(act2)
#step2: calculating mean  grouping the dataframe
act2_agg_int1<-group_by(act2, interval3, day_type)
act2_agg_int1$steps<-round(act2_agg_int1$steps, digits=2)
act2_agg_int2<-summarise(act2_agg_int1,
steps_mean=mean(steps))
act2_agg_int2$steps_mean<-round(act2_agg_int2$steps_mean, digits=2)
head(act2_agg_int2)
#step3: plotting
ggplot(data=act2_agg_int2, aes(x=interval3, y=steps_mean))+
geom_line()+
scale_x_discrete(breaks=seq(0,24,.5))+
facet_grid(day_type~.)+
ggtitle("pattern in weekdays and weekand days")
```
This graph shows us that the pattern are quite similar, with this differences:
- there is a peak in the weekdays at 9 am, probably when people go to work;
- there are higher values in the weekend afternoon, probably beacuse of walks.
I am expecting that the median is higher on weekend compared to weekdays. Let'see
```{r weekdays and weekand days average}
by(act2_agg_int2$steps_mean, act2_agg_int2$day_type, summary)
by(act2_agg_int2$steps_mean, act2_agg_int2$day_type, sum)
```
My expectations were true. Mean, median and sum of steps taken for each interval are higher in weekend days.
So, more steps in less peaks... that's relax and health!
## Launching Knitr
```{r}
knit2html("/Users/Americo/Documents/Education/Data_science/Coursera/reproducible_research/project/RepData_PeerAssessment1/PA1_template_files/PA1_template.Rmd")
```
knit2html("/Users/Americo/Documents/Education/Data_science/Coursera/reproducible_research/project/RepData_PeerAssessment1/PA1_template_files/PA1_template.Rmd")
library("knitr")
library("knitr")
